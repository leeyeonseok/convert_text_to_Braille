#흔들리는 꽃들 속에서 너의 샴푸향이 느껴진거야.

#단어별로 끊어서 입력 됨.
#입력된 리스트들 사이에 띄어쓰기를 넣어줘야 함.
#처음부터 단어별로 끊어서 변환하면 되지 않나?
#예외 사항들 검수 함수들을 묶어서 하나의 모듈로 관리하는게 좋지 않을까?
from leeys import *


#예의함수 1
#예외함수 2  등등등
#기본 함수
#메인 함수의 기능: 글자 단위로 끊어진 리스트를 검수하여 예외가 있으면 Exception을 상속한 클래스로 예외 처리한다. index넘버가 필요없다.


import NaverClova
abbreviation_1 = [
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅐ'], ['ㅅ', 'ㅓ']],
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅓ'], ['ㄴ', 'ㅏ']],
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅓ'], ['ㅁ', 'ㅕ', 'ㄴ']],
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅓ'], ['ㅁ', 'ㅡ'], ['ㄹ', 'ㅗ']],
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅓ', 'ㄴ'], ['ㄷ', 'ㅔ']],
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅣ'], ['ㄱ', 'ㅗ']],
    [['ㄱ', 'ㅡ'], ['ㄹ', 'ㅣ'], ['ㅎ', 'ㅏ'], ['ㅇ', 'ㅕ']]
    ]
                # 그래서, 그러나, 그러면, 그러므로, 그런데, 그리고, 그리하여
abbreviation_2 = [
    ['ㄱ', 'ㅏ'], ['ㄴ', 'ㅏ'], ['ㄷ', 'ㅏ'], ['ㅁ', 'ㅏ'], ['ㅂ', 'ㅏ'], ['ㅅ', 'ㅏ'], ['ㅈ', 'ㅏ'],
    ['ㅋ', 'ㅏ'], ['ㅌ', 'ㅏ'], ['ㅍ', 'ㅏ'], ['ㅎ', 'ㅏ'], ['ㄲ', 'ㅏ'], ['ㅆ', 'ㅏ'],
    ['ㅓ', 'ㄱ'], ['ㅓ', 'ㄴ'], ['ㅓ', 'ㄹ'], ['ㅕ', 'ㄴ'], ['ㅕ', 'ㄹ'], ['ㅕ', 'ㅇ'], ['ㅗ', 'ㄱ'], ['ㅗ', 'ㄴ'],
    ['ㅗ', 'ㅇ'], ['ㅜ', 'ㄴ'], ['ㅜ', 'ㄹ'], ['ㅡ', 'ㄴ'], ['ㅡ', 'ㄹ'], ['ㅣ', 'ㄴ'], ['ㄱ', 'ㅓ', 'ㅅ'],['ㄲ', 'ㅓ', 'ㅅ']
    ]
                # 가, 나, 다, 마, 바, 사, 자, 카, 타, 파, 하, 까, 싸
                # ㅓㄱ, ㅓㄴ, ㅓㄹ, ㅕㄴ, ㅕㄹ, ㅕㅇ, ㅗㄱ, ㅗㄴ, ㅗㅇ, ㅜㄴ, ㅜㄹ, ㅡㄴ, ㅡㄹ, ㅣㄴ, 것, 껏
abbreviation_3 = [['ㅅ', 'ㅓ', 'ㅇ'], ['ㅆ', 'ㅓ', 'ㅇ'], ['ㅈ', 'ㅓ', 'ㅇ'], ['ㅉ', 'ㅓ', 'ㅇ'], ['ㅊ', 'ㅓ', 'ㅇ']]
                # 성, 썽, 정, 쩡, 청
# 초성 리스트. 00 ~ 18
CHOSUNG_dict={
    'ㄱ':[0, 1, 0, 0, 0, 0],
    'ㄲ':[[0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0]],
    'ㄴ':[0, 1, 1, 0, 0, 0],
    'ㄷ':[1, 1, 0, 0, 0, 0],
    'ㄸ':[[0, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0]],
    'ㄹ':[0, 0, 0, 1, 0, 0],
    'ㅁ':[1, 0, 0, 1, 0, 0],
    'ㅂ':[0, 1, 0, 1, 0, 0],
    'ㅃ':[[0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0]],
    'ㅅ':[0, 0, 0, 0, 0, 1],
    'ㅆ':[[0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1]],
    'ㅇ':[1, 1, 1, 1, 0, 0],
    'ㅈ':[0, 1, 0, 0, 0, 1],
    'ㅉ':[[0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1]],
    'ㅊ':[0, 0, 0, 1, 0, 1],
    'ㅋ':[1, 1, 1, 0, 0, 0],
    'ㅌ':[1, 0, 1, 1, 0, 0],
    'ㅍ':[1, 1, 0, 1, 0, 0],
    'ㅎ':[0, 1, 1, 1, 0, 0],
}
CHOSUNG = list(CHOSUNG_dict.keys())
# 중성 리스트. 00 ~ 20
JUNGSUNG_dict={
'ㅏ':[1, 0, 1, 0, 0, 1],
'ㅐ':[1, 0, 1, 1, 1, 0],
'ㅑ':[0, 1, 0, 1, 1, 0],
'ㅒ':[[0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0]],
'ㅓ':[0, 1, 1, 0, 1, 0],
'ㅔ':[1, 1, 0, 1, 1, 0],
'ㅕ':[1, 0, 0, 1, 0, 1],
'ㅖ':[0, 1, 0, 0, 1, 0],
'ㅗ':[1, 0, 0, 0, 1, 1],
'ㅘ':[1, 0, 1, 0, 1, 1],
'ㅙ':[[1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0]],
'ㅚ':[1, 1, 0, 1, 1, 1],
'ㅛ':[0, 1, 0, 0, 1, 1],
'ㅜ':[1, 1, 0, 0, 1, 0],
'ㅝ':[1, 1, 1, 0, 1, 0],
'ㅞ':[[1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0]],
'ㅟ':[[1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0]],
'ㅠ':[1, 1, 0, 0, 0, 1],
'ㅡ':[0, 1, 1, 0, 0, 1],
'ㅢ':[0, 1, 1, 1, 0, 1],
'ㅣ':[1, 0, 0, 1, 1, 0],
}
JUNGSUNG = list(JUNGSUNG_dict.keys()) # 2, 9, 13, 14
# 종성 리스트. 00 ~ 27 + 1(1개 없음)
JONGSUNG_dict={
' ':[],
'ㄱ':[1, 0, 0, 0, 0, 0],
'ㄲ':[[1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]],
'ㄳ':[[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0]],
'ㄴ':[0, 0, 1, 1, 0, 0],
'ㄵ':[[0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0]],
'ㄶ':[[0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1]],
'ㄷ':[0, 0, 0, 1, 1, 0],
'ㄹ':[0, 0, 1, 0, 0, 0],
'ㄺ':[[0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0]],
'ㄻ':[[0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1]],
'ㄼ':[[0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0]],
'ㄽ':[[0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0]],
'ㄾ':[[0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1]],
'ㄿ':[[0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1]],
'ㅀ':[[0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1]],
'ㅁ':[0, 0, 1, 0, 0, 1],
'ㅂ':[1, 0, 1, 0, 0, 0],
'ㅄ':[[1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0]],
'ㅅ':[0, 0, 0, 0, 1, 0],
'ㅆ':[0, 1, 0, 0, 1, 0],
'ㅇ':[0, 0, 1, 1, 1, 1],
'ㅈ':[1, 0, 0, 0, 1, 0],
'ㅊ':[0, 0, 1, 0, 1, 0],
'ㅋ':[0, 0, 1, 1, 1, 0],
'ㅌ':[0, 0, 1, 0, 1, 1],
'ㅍ':[0, 0, 1, 1, 0, 1],
'ㅎ':[0, 0, 0, 1, 1, 1]
}
JONGSUNG = list(JONGSUNG_dict.keys())

#print(CHOSUNG)
text_list=NaverClova.main()
print(text_list)


def separation_text(input_list):
    separation_list = []
    for word in input_list:  # 양쪽 공백 지우기
        # 영어인 경우 구분 해서 작성함.
        if '가' <= word <= '힣':
            # 588개 마다 초성이 바뀜.
            char1 = (ord(word) - ord('가')) // 588  #몫을 반환,하나의 문자를 인자로 받고 해당 문자에 해당하는 유니코드 정수를 반환합니다.
            # 중성은 총 28가지 종류
            char2 = ((ord(word) - ord('가')) - (588 * char1)) // 28
            char3 = (ord(word) - ord('가')) - (588 * char1) - 28 * char2
            if not char3:  #char3값이 FAlSE면 실행.
                separation_list.append([CHOSUNG[char1], JUNGSUNG[char2]])
            else:
                separation_list.append([CHOSUNG[char1], JUNGSUNG[char2], JONGSUNG[char3]])
        else:
            separation_list.append([word])
    return separation_list

for text in text_list:  #text_list는 ['흔들리는','꽃들','속에서'],text는 text_list의 한 요소(어절) 씩 들어감.
    Sep_text=separation_text(text)
    print(text)
    #Sep_text 에 대해서 convert를 진행.Sep_text는'흔들리는' 한 단어 단위를 글자 단위로 끊어 놓은 것.[['ㅎ', 'ㅡ', 'ㄴ'], ['ㄷ', 'ㅡ', 'ㄹ'], ['ㄹ', 'ㅣ'], ['ㄴ', 'ㅡ', 'ㄴ']]

    # for word in Sep_text:  #word는 ['ㅎ','ㅡ','ㄴ'] 과 같은 한 글자들의 글자 단위
    #     try:
    #         print(word)
    #         print(CHOSUNG_dict.get(word[0]))  #'ㅎ'에 해당하는 점자 value 가져오기
    #         print(JUNGSUNG_dict.get(word[1]))  #'ㅡ'에 해당하는 점자 value가져오기
    #         print(JONGSUNG_dict.get(word[2]))
    #     except IndexError:
    #         pass









